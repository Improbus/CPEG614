never mutex {    /* !([] (((((crit[0]+crit[1])+crit[2])+crit[3])<=1))) */
T0_init:
	do
	:: atomic { (! ((((((crit[0]+crit[1])+crit[2])+crit[3])<=1)))) -> assert(!(! ((((((crit[0]+crit[1])+crit[2])+crit[3])<=1))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never fair {    /* !((((<> (crit[0])) && (<> (crit[1]))) && (<> (crit[2]))) && (<> (crit[3]))) */
accept_init:
T0_init:
	do
	:: (! ((crit[3]))) -> goto accept_S6
	:: (! ((crit[2]))) -> goto accept_S11
	:: (! ((crit[1]))) -> goto accept_S14
	:: (! ((crit[0]))) -> goto accept_S17
	od;
accept_S6:
T0_S6:
	do
	:: (! ((crit[3]))) -> goto accept_S6
	od;
accept_S11:
T0_S11:
	do
	:: (! ((crit[2]))) -> goto accept_S11
	od;
accept_S14:
T0_S14:
	do
	:: (! ((crit[1]))) -> goto accept_S14
	od;
accept_S17:
T0_S17:
	do
	:: (! ((crit[0]))) -> goto accept_S17
	od;
}
