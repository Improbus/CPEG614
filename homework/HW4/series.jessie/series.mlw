theory Jessie_model

use import int.Int

use bool.Bool

use import real.RealInfix

use import jessie3theories.Jessie_memory_model

type charP

type padding

type unsigned_charP

type voidP

function charP_tag  : (tag_id charP)

axiom charP_int "charP_int": ((int_of_tag charP_tag) = (1))

function charP_of_pointer_address (pointer ()) : (pointer charP)

axiom charP_of_pointer_address_of_pointer_addr "charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer charP).
  (p = (charP_of_pointer_address (pointer_address p))))

axiom charP_parenttag_bottom "charP_parenttag_bottom":
 (parenttag charP_tag bottom_tag)

axiom charP_tags "charP_tags":
 (forall x:(pointer charP).
  (forall charP_tag_table:(tag_table charP).
   (instanceof charP_tag_table x charP_tag)))

predicate left_valid_struct_charP(p:(pointer charP)) (a:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_min charP_alloc_table p) <= a)

predicate left_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_min unsigned_charP_alloc_table p) <= a)

predicate left_valid_struct_voidP(p:(pointer voidP)) (a:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_min voidP_alloc_table p) <= a)

axiom pointer_addr_of_charP_of_pointer_address "pointer_addr_of_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (charP_of_pointer_address p))))

function unsigned_charP_of_pointer_address (pointer ()) : (pointer unsigned_charP)

axiom pointer_addr_of_unsigned_charP_of_pointer_address "pointer_addr_of_unsigned_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (unsigned_charP_of_pointer_address p))))

function voidP_of_pointer_address (pointer ()) : (pointer voidP)

axiom pointer_addr_of_voidP_of_pointer_address "pointer_addr_of_voidP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (voidP_of_pointer_address p))))

function power real int : real

predicate right_valid_struct_charP(p:(pointer charP)) (b:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_max charP_alloc_table p) >= b)

predicate right_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_max unsigned_charP_alloc_table p) >= b)

predicate right_valid_struct_voidP(p:(pointer voidP)) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_max voidP_alloc_table p) >= b)

predicate strict_valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate strict_valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

function unsigned_charP_tag  : (tag_id unsigned_charP)

axiom unsigned_charP_int "unsigned_charP_int":
 ((int_of_tag unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr "unsigned_charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer unsigned_charP).
  (p = (unsigned_charP_of_pointer_address (pointer_address p))))

axiom unsigned_charP_parenttag_bottom "unsigned_charP_parenttag_bottom":
 (parenttag unsigned_charP_tag bottom_tag)

axiom unsigned_charP_tags "unsigned_charP_tags":
 (forall x:(pointer unsigned_charP).
  (forall unsigned_charP_tag_table:(tag_table unsigned_charP).
   (instanceof unsigned_charP_tag_table x unsigned_charP_tag)))

predicate valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

predicate valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

function voidP_tag  : (tag_id voidP)

axiom voidP_int "voidP_int": ((int_of_tag voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr "voidP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer voidP).
  (p = (voidP_of_pointer_address (pointer_address p))))

axiom voidP_parenttag_bottom "voidP_parenttag_bottom":
 (parenttag voidP_tag bottom_tag)

axiom voidP_tags "voidP_tags":
 (forall x:(pointer voidP).
  (forall voidP_tag_table:(tag_table voidP).
   (instanceof voidP_tag_table x voidP_tag)))

axiom power0 "expl:Lemma power0, axiom" #"/home/ddeco/HW4/series.c" 23 4 48#:
 (forall x_0_0:real. ((power x_0_0 (0)) = 1.0))

axiom power1 "expl:Lemma power1, axiom" #"/home/ddeco/HW4/series.c" 24 4 81#:
 (forall x_1_0:real.
  (forall n_0:int.
   ((Int.(>=) n_0 (1)) ->
    ((power x_1_0 n_0) = (Real.(*) x_1_0 (power x_1_0 (Int.(-) n_0 (1))))))))

end

module Jessie_program

use import int.Int

use bool.Bool

use import real.RealInfix

use import jessie3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie3.JessieDivision

use import jessie3.Jessie_memory_model_parameters

use import jessie3_integer.Integer

exception Goto_while_0_break_exc ()

exception Loop_continue_exc ()

exception Loop_exit_exc ()

exception Return_label_exc ()

val charP_alloc_table : ref (alloc_table charP)

val charP_tag_table : ref (tag_table charP)

val alloc_struct_charP
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { true } writes { charP_alloc_table, charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val alloc_struct_charP_requires
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { (Int.(>=) n (0)) } writes { charP_alloc_table,
    charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)

val unsigned_charP_tag_table : ref (tag_table unsigned_charP)

val alloc_struct_unsigned_charP
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { true } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val alloc_struct_unsigned_charP_requires
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { (Int.(>=) n (0)) } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val voidP_alloc_table : ref (alloc_table voidP)

val voidP_tag_table : ref (tag_table voidP)

val alloc_struct_voidP
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val alloc_struct_voidP_requires
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { (Int.(>=) n (0)) } writes { voidP_alloc_table,
    voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val series
 (n_1:int)
  (x_1:real) : real
   requires { true }
    ensures { (#"/home/ddeco/HW4/series.c" 29 12 41#
              ((Real.(*) (Real.(-) x_1 1.0) result) = (Real.(-)
                                                      (power x_1 n_1) 1.0))) }

val series_requires
 (n_1:int)
  (x_1:real) : real
   requires { (#"/home/ddeco/HW4/series.c" 28 13 28#
              ((#"/home/ddeco/HW4/series.c" 28 13 18# (Int.(>=) n_1 (0)))
              /\ (#"/home/ddeco/HW4/series.c" 28 22 28# (x_1 <> 1.0)))) }
    ensures { (#"/home/ddeco/HW4/series.c" 29 12 41#
              ((Real.(*) (Real.(-) x_1 1.0) result) = (Real.(-)
                                                      (power x_1 n_1) 1.0))) }

let series_ensures_default "W:diverges:N" "expl:Function series, default behavior"
 #"/home/ddeco/HW4/series.c" 31 6 12#=
 fun (n_1 : int) (x_1 : real) ->
  requires { (#"/home/ddeco/HW4/series.c" 28 13 28#
             ((#"/home/ddeco/HW4/series.c" 28 13 18# (Int.(>=) n_1 (0)))
             /\ (#"/home/ddeco/HW4/series.c" 28 22 28# (x_1 <> 1.0))))  }
  ensures { (#"/home/ddeco/HW4/series.c" 29 12 41#
            ((Real.(*) (Real.(-) x_1 1.0) result) = (Real.(-) (power x_1 n_1)
                                                    1.0))) }('Init: 
                                                            (let return =
                                                            ref (any_real ()) in
                                                            try
                                                             begin
                                                               (let i =
                                                               ref (any_int ()) in
                                                               (let s_0 =
                                                               ref (any_real ()) in
                                                               (let t =
                                                               ref (any_real ()) in
                                                               try
                                                                begin
                                                                  (let _jessie_18 =
                                                                  (i := (0)) in
                                                                  ());
                                                                 (let _jessie_20 =
                                                                 (s_0 := 0.0) in
                                                                 ());
                                                                 (let _jessie_22 =
                                                                 (t := 1.0) in
                                                                 ());
                                                                 ('Loop_2: 
                                                                 begin
                                                                   loop
                                                                   invariant
                                                                    { 
                                                                    (
                                                                    (#"/home/ddeco/HW4/series.c" 38 21 33#
                                                                    (
                                                                    (Real.(*)
                                                                    !s_0
                                                                    (Real.(-)
                                                                    x_1 1.0)) = 
                                                                    (Real.(-)
                                                                    !t 1.0)))
                                                                    /\ 
                                                                    (
                                                                    (#"/home/ddeco/HW4/series.c" 37 21 34#
                                                                    (!t = 
                                                                    (power
                                                                    x_1 !i)))
                                                                    /\ 
                                                                    (#"/home/ddeco/HW4/series.c" 36 21 28#
                                                                    (
                                                                    (#"/home/ddeco/HW4/series.c" 36 21 25#
                                                                    (Int.(<=)
                                                                    (0) !i))
                                                                    /\ 
                                                                    (#"/home/ddeco/HW4/series.c" 36 24 28#
                                                                    (Int.(<=)
                                                                    !i n_1)))))) }
                                                                    
                                                                    begin
                                                                      
                                                                    any ()
                                                                    requires { true }
                                                                     ensures { true } ;
                                                                    try
                                                                    begin
                                                                      
                                                                    (let _jessie_28 =
                                                                    begin
                                                                      
                                                                    (if 
                                                                    (Int.(<) !i n_1)
                                                                    then ()
                                                                    else
                                                                    (raise
                                                                    (Goto_while_0_break_exc
                                                                    ())));
                                                                    (let _jessie_24 =
                                                                    (s_0 := 
                                                                    (Real.(+) !s_0 !t)) in
                                                                    ());
                                                                    (let _jessie_26 =
                                                                    (t := 
                                                                    (Real.(*) !t x_1)) in
                                                                    ());
                                                                    (i := 
                                                                    (Int.(+) !i (1)));
                                                                    !i end in
                                                                    ());
                                                                    (raise
                                                                    (Loop_continue_exc
                                                                    ())) end
                                                                    with
                                                                    Loop_continue_exc _jessie_3 ->
                                                                    () end
                                                                    end end;
                                                                  (raise
                                                                   (Goto_while_0_break_exc
                                                                   ())) end)
                                                                end with
                                                                Goto_while_0_break_exc _jessie_1 ->
                                                                ('While_0_break: 
                                                                begin
                                                                  ();
                                                                 (return := !s_0);
                                                                 (raise
                                                                  Return) end) end)));
                                                              absurd  end
                                                             with Return ->
                                                             !return end)) 

let series_safety "expl:Function series, Safety"
 #"/home/ddeco/HW4/series.c" 31 6 12#=
 fun (n_1 : int) (x_1 : real) ->
  requires { (#"/home/ddeco/HW4/series.c" 28 13 28#
             ((#"/home/ddeco/HW4/series.c" 28 13 18# (Int.(>=) n_1 (0)))
             /\ (#"/home/ddeco/HW4/series.c" 28 22 28# (x_1 <> 1.0))))  }
  ensures { true }('Init: 
                  (let return = ref (any_real ()) in
                  try
                   begin
                     (let i = ref (any_int ()) in
                     (let s_0 = ref (any_real ()) in
                     (let t = ref (any_real ()) in
                     try
                      begin
                        (let _jessie_5 = (i := (0)) in ());
                       (let _jessie_7 = (s_0 := 0.0) in ());
                       (let _jessie_9 = (t := 1.0) in ());
                       ('Loop_1: 
                       begin
                         loop
                         invariant
                           { (#"/home/ddeco/HW4/series.jessie/series.jc" 61 6 591#
                             true) }
                           variant { (#"/home/ddeco/HW4/series.c" 39 19 22# 
                             (Int.(-) n_1 !i)) }
                          begin
                            any ()
                            requires { true } reads { i, s_0, t } 
                             ensures { ((#"/home/ddeco/HW4/series.c" 38 21 33#
                                        ((Real.(*) !s_0 (Real.(-) x_1 1.0)) = 
                                        (Real.(-) !t 1.0)))
                                       /\ ((#"/home/ddeco/HW4/series.c" 37 21 34#
                                           (!t = (power x_1 !i)))
                                          /\ (#"/home/ddeco/HW4/series.c" 36 21 28#
                                             ((#"/home/ddeco/HW4/series.c" 36 21 25#
                                              (Int.(<=) (0) !i))
                                             /\ (#"/home/ddeco/HW4/series.c" 36 24 28#
                                                (Int.(<=) !i n_1)))))) } ;
                           try
                            begin
                              (let _jessie_15 =
                              begin
                                (if (Int.(<) !i n_1) then ()
                                else (raise (Goto_while_0_break_exc ())));
                               (let _jessie_11 =
                               (s_0 := (Real.(+) !s_0 !t)) in ());
                               (let _jessie_13 = (t := (Real.(*) !t x_1)) in
                               ()); (i := (Int.(+) !i (1))); !i end in ());
                             (raise (Loop_continue_exc ())) end with
                            Loop_continue_exc _jessie_3 -> () end end end;
                        (raise (Goto_while_0_break_exc ())) end) end with
                      Goto_while_0_break_exc _jessie_1 ->
                      ('While_0_break: 
                      begin   (); (return := !s_0); (raise Return) end) end)));
                    absurd  end with Return -> !return end)) 

end


