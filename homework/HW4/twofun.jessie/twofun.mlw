theory Jessie_model

use import int.Int

use bool.Bool

use int.ComputerDivision

use import jessie3theories.Jessie_memory_model

type charP

type padding

type unsigned_charP

type voidP

function charP_tag  : (tag_id charP)

axiom charP_int "charP_int": ((int_of_tag charP_tag) = (1))

function charP_of_pointer_address (pointer ()) : (pointer charP)

axiom charP_of_pointer_address_of_pointer_addr "charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer charP).
  (p = (charP_of_pointer_address (pointer_address p))))

axiom charP_parenttag_bottom "charP_parenttag_bottom":
 (parenttag charP_tag bottom_tag)

axiom charP_tags "charP_tags":
 (forall x:(pointer charP).
  (forall charP_tag_table:(tag_table charP).
   (instanceof charP_tag_table x charP_tag)))

predicate left_valid_struct_charP(p:(pointer charP)) (a:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_min charP_alloc_table p) <= a)

predicate left_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_min unsigned_charP_alloc_table p) <= a)

predicate left_valid_struct_voidP(p:(pointer voidP)) (a:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_min voidP_alloc_table p) <= a)

axiom pointer_addr_of_charP_of_pointer_address "pointer_addr_of_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (charP_of_pointer_address p))))

function unsigned_charP_of_pointer_address (pointer ()) : (pointer unsigned_charP)

axiom pointer_addr_of_unsigned_charP_of_pointer_address "pointer_addr_of_unsigned_charP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (unsigned_charP_of_pointer_address p))))

function voidP_of_pointer_address (pointer ()) : (pointer voidP)

axiom pointer_addr_of_voidP_of_pointer_address "pointer_addr_of_voidP_of_pointer_address":
 (forall p:(pointer ()).
  (p = (pointer_address (voidP_of_pointer_address p))))

predicate right_valid_struct_charP(p:(pointer charP)) (b:int) (charP_alloc_table:(alloc_table charP)) =
 ((offset_max charP_alloc_table p) >= b)

predicate right_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 ((offset_max unsigned_charP_alloc_table p) >= b)

predicate right_valid_struct_voidP(p:(pointer voidP)) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 ((offset_max voidP_alloc_table p) >= b)

predicate strict_valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

predicate strict_valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) = a)
 /\ ((offset_max charP_alloc_table p) = b))

predicate strict_valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) = a)
 /\ ((offset_max unsigned_charP_alloc_table p) = b))

predicate strict_valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) = a)
 /\ ((offset_max voidP_alloc_table p) = b))

function unsigned_charP_tag  : (tag_id unsigned_charP)

axiom unsigned_charP_int "unsigned_charP_int":
 ((int_of_tag unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr "unsigned_charP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer unsigned_charP).
  (p = (unsigned_charP_of_pointer_address (pointer_address p))))

axiom unsigned_charP_parenttag_bottom "unsigned_charP_parenttag_bottom":
 (parenttag unsigned_charP_tag bottom_tag)

axiom unsigned_charP_tags "unsigned_charP_tags":
 (forall x:(pointer unsigned_charP).
  (forall unsigned_charP_tag_table:(tag_table unsigned_charP).
   (instanceof unsigned_charP_tag_table x unsigned_charP_tag)))

predicate valid_root_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_root_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_root_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

predicate valid_struct_charP(p:(pointer charP)) (a:int) (b:int) (charP_alloc_table:(alloc_table charP)) =
 (((offset_min charP_alloc_table p) <= a)
 /\ ((offset_max charP_alloc_table p) >= b))

predicate valid_struct_unsigned_charP(p:(pointer unsigned_charP)) (a:int) (b:int) (unsigned_charP_alloc_table:(alloc_table unsigned_charP)) =
 (((offset_min unsigned_charP_alloc_table p) <= a)
 /\ ((offset_max unsigned_charP_alloc_table p) >= b))

predicate valid_struct_voidP(p:(pointer voidP)) (a:int) (b:int) (voidP_alloc_table:(alloc_table voidP)) =
 (((offset_min voidP_alloc_table p) <= a)
 /\ ((offset_max voidP_alloc_table p) >= b))

function voidP_tag  : (tag_id voidP)

axiom voidP_int "voidP_int": ((int_of_tag voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr "voidP_of_pointer_address_of_pointer_addr":
 (forall p:(pointer voidP).
  (p = (voidP_of_pointer_address (pointer_address p))))

axiom voidP_parenttag_bottom "voidP_parenttag_bottom":
 (parenttag voidP_tag bottom_tag)

axiom voidP_tags "voidP_tags":
 (forall x:(pointer voidP).
  (forall voidP_tag_table:(tag_table voidP).
   (instanceof voidP_tag_table x voidP_tag)))

end

module Jessie_program

use import int.Int

use bool.Bool

use int.ComputerDivision

use import jessie3theories.Jessie_memory_model

use import Jessie_model

use import ref.Ref

use import jessie3.JessieDivision

use import jessie3.Jessie_memory_model_parameters

use import jessie3_integer.Integer

exception Loop_continue_exc ()

exception Loop_exit_exc ()

exception Return_label_exc ()

val charP_alloc_table : ref (alloc_table charP)

val charP_tag_table : ref (tag_table charP)

val alloc_struct_charP
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { true } writes { charP_alloc_table, charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val alloc_struct_charP_requires
 (n:int)
  (charP_alloc_table:ref (alloc_table charP))
   (charP_tag_table:ref (tag_table charP)) : (pointer charP)
    requires { (Int.(>=) n (0)) } writes { charP_alloc_table,
    charP_tag_table }
     ensures { ((strict_valid_struct_charP result (0) (Int.(-) n (1))
                !charP_alloc_table)
               /\ ((alloc_extends (old !charP_alloc_table)
                   !charP_alloc_table)
                  /\ ((alloc_fresh (old !charP_alloc_table) result n)
                     /\ (instanceof !charP_tag_table result charP_tag)))) }

val unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)

val unsigned_charP_tag_table : ref (tag_table unsigned_charP)

val alloc_struct_unsigned_charP
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { true } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val alloc_struct_unsigned_charP_requires
 (n:int)
  (unsigned_charP_alloc_table:ref (alloc_table unsigned_charP))
   (unsigned_charP_tag_table:ref (tag_table unsigned_charP))
    : (pointer unsigned_charP)
    requires { (Int.(>=) n (0)) } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
     ensures { ((strict_valid_struct_unsigned_charP result (0)
                (Int.(-) n (1)) !unsigned_charP_alloc_table)
               /\ ((alloc_extends (old !unsigned_charP_alloc_table)
                   !unsigned_charP_alloc_table)
                  /\ ((alloc_fresh (old !unsigned_charP_alloc_table) result
                      n)
                     /\ (instanceof !unsigned_charP_tag_table result
                        unsigned_charP_tag)))) }

val voidP_alloc_table : ref (alloc_table voidP)

val voidP_tag_table : ref (tag_table voidP)

val alloc_struct_voidP
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val alloc_struct_voidP_requires
 (n:int)
  (voidP_alloc_table:ref (alloc_table voidP))
   (voidP_tag_table:ref (tag_table voidP)) : (pointer voidP)
    requires { (Int.(>=) n (0)) } writes { voidP_alloc_table,
    voidP_tag_table }
     ensures { ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
                !voidP_alloc_table)
               /\ ((alloc_extends (old !voidP_alloc_table)
                   !voidP_alloc_table)
                  /\ ((alloc_fresh (old !voidP_alloc_table) result n)
                     /\ (instanceof !voidP_tag_table result voidP_tag)))) }

val f (n_1:int) : int requires { true }  ensures { true }

val f_requires
 (n_1:int) : int
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true) }
   ensures { true }

val g (n_2:int) : int requires { true }  ensures { true }

val g_requires
 (n_2:int) : int
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true) }
   ensures { true }

val h
 (n_3:int) : int
  requires { true }
   ensures { (#"/home/ddeco/HW4/twofun.c" 27 12 67#
             ((((ComputerDivision.mod n_3 (2)) = (0)) ->
               (result = (ComputerDivision.div n_3 (2))))
             \/ ((Int.(>) (ComputerDivision.mod n_3 (2)) (0)) ->
                 (result = (Int.(-) (Int.(*) (3) n_3) (1)))))) }

val h_requires
 (n_3:int) : int
  requires { (#"/home/ddeco/HW4/twofun.c" 26 13 17# (Int.(>=) n_3 (1))) }
   ensures { (#"/home/ddeco/HW4/twofun.c" 27 12 67#
             ((((ComputerDivision.mod n_3 (2)) = (0)) ->
               (result = (ComputerDivision.div n_3 (2))))
             \/ ((Int.(>) (ComputerDivision.mod n_3 (2)) (0)) ->
                 (result = (Int.(-) (Int.(*) (3) n_3) (1)))))) }

let f_ensures_default "W:diverges:N" "expl:Function f, default behavior"
 #"/home/ddeco/HW4/twofun.c" 18 4 5#=
 fun (n_1 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true)  }
  ensures { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true) }('Init: 
                                                             (let return =
                                                             ref (any_int ()) in
                                                             try
                                                              begin
                                                                (let __retres =
                                                                ref (any_int ()) in
                                                                begin
                                                                  (let _jessie_6 =
                                                                  (__retres := 
                                                                   ("expl:division by zero"
                                                                   #"/home/ddeco/HW4/twofun.c" 19 9 12#
                                                                   (ComputerDivision.div n_1 (2)))) in
                                                                  ());
                                                                 (return := !__retres);
                                                                 (raise
                                                                  Return) end);
                                                               absurd  end
                                                              with Return ->
                                                              !return end)) 

let f_safety "expl:Function f, Safety" #"/home/ddeco/HW4/twofun.c" 18 4 5#=
 fun (n_1 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true)  }
  ensures { true }('Init: 
                  (let return = ref (any_int ()) in
                  try
                   begin
                     (let __retres = ref (any_int ()) in
                     begin
                       (let _jessie_3 =
                       (__retres := ("expl:division by zero"
                                    #"/home/ddeco/HW4/twofun.c" 19 9 12#
                                    (computer_div_ n_1 (2)))) in ());
                      (return := !__retres); (raise Return) end); absurd  end
                   with Return -> !return end)) 

let g_ensures_default "W:diverges:N" "expl:Function g, default behavior"
 #"/home/ddeco/HW4/twofun.c" 22 4 5#=
 fun (n_2 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true)  }
  ensures { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true) }('Init: 
                                                             (let return =
                                                             ref (any_int ()) in
                                                             try
                                                              begin
                                                                (let __retres_0 =
                                                                ref (any_int ()) in
                                                                begin
                                                                  (let _jessie_12 =
                                                                  (__retres_0 := 
                                                                   (Int.(-) 
                                                                    (Int.(*) (3) n_2) (1))) in
                                                                  ());
                                                                 (return := !__retres_0);
                                                                 (raise
                                                                  Return) end);
                                                               absurd  end
                                                              with Return ->
                                                              !return end)) 

let g_safety "expl:Function g, Safety" #"/home/ddeco/HW4/twofun.c" 22 4 5#=
 fun (n_2 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.jessie/" 0 0 0# true)  }
  ensures { true }('Init: 
                  (let return = ref (any_int ()) in
                  try
                   begin
                     (let __retres_0 = ref (any_int ()) in
                     begin
                       (let _jessie_9 =
                       (__retres_0 := (Int.(-) (Int.(*) (3) n_2) (1))) in ());
                      (return := !__retres_0); (raise Return) end); absurd 
                   end with Return -> !return end)) 

let h_ensures_default "W:diverges:N" "expl:Function h, default behavior"
 #"/home/ddeco/HW4/twofun.c" 29 4 5#=
 fun (n_3 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.c" 26 13 17# (Int.(>=) n_3 (1)))  }
  ensures { (#"/home/ddeco/HW4/twofun.c" 27 12 67#
            ((((ComputerDivision.mod n_3 (2)) = (0)) ->
              (result = (ComputerDivision.div n_3 (2))))
            \/ ((Int.(>) (ComputerDivision.mod n_3 (2)) (0)) ->
                (result = (Int.(-) (Int.(*) (3) n_3) (1)))))) }('Init: 
                                                               (let return =
                                                               ref (any_int ()) in
                                                               try
                                                                begin
                                                                  (let tmp =
                                                                  ref 
                                                                  (any_int ()) in
                                                                  (let tmp_0 =
                                                                  ref 
                                                                  (any_int ()) in
                                                                  (let __retres_1 =
                                                                  ref 
                                                                  (any_int ()) in
                                                                  try
                                                                   begin
                                                                     
                                                                    (if 
                                                                    (("expl:division by zero"
                                                                    #"/home/ddeco/HW4/twofun.c" 30 6 9#
                                                                    (ComputerDivision.mod n_3 (2))) = (0))
                                                                    then
                                                                    begin
                                                                      
                                                                    (let _jessie_27 =
                                                                    (tmp := 
                                                                    (let _jessie_26 =
                                                                    n_3 in
                                                                    ("expl:precondition for call"
                                                                    #"/home/ddeco/HW4/twofun.c" 31 11 15#
                                                                    (f _jessie_26)))) in
                                                                    ());
                                                                    (let _jessie_29 =
                                                                    (__retres_1 := !tmp) in
                                                                    ());
                                                                    (raise
                                                                    (Return_label_exc
                                                                    ())) end
                                                                    else
                                                                    begin
                                                                      
                                                                    (let _jessie_32 =
                                                                    (tmp_0 := 
                                                                    (let _jessie_31 =
                                                                    n_3 in
                                                                    ("expl:precondition for call"
                                                                    #"/home/ddeco/HW4/twofun.c" 33 11 15#
                                                                    (g _jessie_31)))) in
                                                                    ());
                                                                    (let _jessie_34 =
                                                                    (__retres_1 := !tmp_0) in
                                                                    ());
                                                                    (raise
                                                                    (Return_label_exc
                                                                    ())) end);
                                                                    (raise
                                                                    (Return_label_exc
                                                                    ())) end
                                                                   with
                                                                   Return_label_exc _jessie_1 ->
                                                                   ('Return_label: 
                                                                   begin
                                                                     
                                                                    (return := !__retres_1);
                                                                    (raise
                                                                    Return)
                                                                   end) end)));
                                                                 absurd  end
                                                                with
                                                                Return ->
                                                                !return end)) 

let h_safety "expl:Function h, Safety" #"/home/ddeco/HW4/twofun.c" 29 4 5#=
 fun (n_3 : int) ->
  requires { (#"/home/ddeco/HW4/twofun.c" 26 13 17# (Int.(>=) n_3 (1)))  }
  ensures { true }('Init: 
                  (let return = ref (any_int ()) in
                  try
                   begin
                     (let tmp = ref (any_int ()) in
                     (let tmp_0 = ref (any_int ()) in
                     (let __retres_1 = ref (any_int ()) in
                     try
                      begin
                        (if (("expl:division by zero"
                             #"/home/ddeco/HW4/twofun.c" 30 6 9#
                             (computer_mod_ n_3 (2))) = (0))
                        then
                         begin
                           (let _jessie_16 =
                           (tmp := (let _jessie_15 = n_3 in
                                   ("expl:precondition for call"
                                   #"/home/ddeco/HW4/twofun.c" 31 11 15#
                                   (f_requires _jessie_15)))) in ());
                          (let _jessie_18 = (__retres_1 := !tmp) in ());
                          (raise (Return_label_exc ())) end
                        else
                         begin
                           (let _jessie_21 =
                           (tmp_0 := (let _jessie_20 = n_3 in
                                     ("expl:precondition for call"
                                     #"/home/ddeco/HW4/twofun.c" 33 11 15#
                                     (g_requires _jessie_20)))) in ());
                          (let _jessie_23 = (__retres_1 := !tmp_0) in ());
                          (raise (Return_label_exc ())) end);
                       (raise (Return_label_exc ())) end with
                      Return_label_exc _jessie_1 ->
                      ('Return_label: 
                      begin   (return := !__retres_1); (raise Return) end) end)));
                    absurd  end with Return -> !return end)) 

end


